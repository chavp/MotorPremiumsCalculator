// <auto-generated />
using System;
using InsuranceProducts.Tests.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InsuranceProducts.Tests.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    partial class ProductsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverageAvailabilityTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverageLevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverageTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CoverageAvailabilityTypeId");

                    b.HasIndex("CoverageLevelId");

                    b.HasIndex("CoverageTypeId");

                    b.HasIndex("ProductId", "CoverageAvailabilityTypeId", "CoverageTypeId", "CoverageLevelId")
                        .HasDatabaseName("IX_CoverageAvailabilities_ProductCoverages");

                    b.ToTable("CoverageAvailabilities", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAvailabilityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageAvailabilityTypes", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageBasis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageBasises", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverageBasisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoverageLevelTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CoverageBasisId");

                    b.HasIndex("CoverageLevelTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("CoverageLevels", "products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageLevelTypes", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageTypes", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UnitCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitCategoryId");

                    b.ToTable("Units", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.UnitCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UnitCategories", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAmount", b =>
                {
                    b.HasBaseType("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.ToTable("CoverageAmounts", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAvailability", b =>
                {
                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAvailabilityType", "CoverageAvailabilityType")
                        .WithMany()
                        .HasForeignKey("CoverageAvailabilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", "CoverageLevel")
                        .WithMany()
                        .HasForeignKey("CoverageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageType", "CoverageType")
                        .WithMany()
                        .HasForeignKey("CoverageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.Product", "Product")
                        .WithMany("CoverageAvailabilities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverageAvailabilityType");

                    b.Navigation("CoverageLevel");

                    b.Navigation("CoverageType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAvailabilityType", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageAvailabilityTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageAvailabilityTypeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageAvailabilityTypes_Code");

                            b1.ToTable("CoverageAvailabilityTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageAvailabilityTypeId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageAvailabilityTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageAvailabilityTypeId");

                            b1.ToTable("CoverageAvailabilityTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageAvailabilityTypeId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageBasis", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageBasisId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageBasisId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageBasises_Code");

                            b1.ToTable("CoverageBasises", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageBasisId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageBasisId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageBasisId");

                            b1.ToTable("CoverageBasises", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageBasisId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", b =>
                {
                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageBasis", "CoverageBasis")
                        .WithMany()
                        .HasForeignKey("CoverageBasisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevelType", "CoverageLevelType")
                        .WithMany()
                        .HasForeignKey("CoverageLevelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverageBasis");

                    b.Navigation("CoverageLevelType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevelType", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageLevelTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageLevelTypeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageLevelTypes_Code");

                            b1.ToTable("CoverageLevelTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageLevelTypeId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageLevelTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageLevelTypeId");

                            b1.ToTable("CoverageLevelTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageLevelTypeId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageType", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageTypeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageTypes_Code");

                            b1.ToTable("CoverageTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageTypeId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageTypeId");

                            b1.ToTable("CoverageTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageTypeId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.Product", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("ProductId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Products_Code");

                            b1.ToTable("Products", "products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products", "products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.Unit", b =>
                {
                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.UnitCategory", "UnitCategory")
                        .WithMany()
                        .HasForeignKey("UnitCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("UnitId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("UnitId");

                            b1.ToTable("Units", "products");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("UnitId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("UnitId");

                            b1.ToTable("Units", "products");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Symbol", "Symbol", b1 =>
                        {
                            b1.Property<Guid>("UnitId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("Symbol");

                            b1.HasKey("UnitId");

                            b1.ToTable("Units", "products");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Symbol");

                    b.Navigation("UnitCategory");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.UnitCategory", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("UnitCategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("UnitCategoryId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_UnitCategories_Code");

                            b1.ToTable("UnitCategories", "products");

                            b1.WithOwner()
                                .HasForeignKey("UnitCategoryId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("UnitCategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("UnitCategoryId");

                            b1.ToTable("UnitCategories", "products");

                            b1.WithOwner()
                                .HasForeignKey("UnitCategoryId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAmount", b =>
                {
                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", null)
                        .WithOne()
                        .HasForeignKey("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAmount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.Product", b =>
                {
                    b.Navigation("CoverageAvailabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
