// <auto-generated />
using System;
using InsuranceProducts.Tests.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InsuranceProducts.Tests.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    [Migration("20251007095003_iniPrds1")]
    partial class iniPrds1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageBasis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageBasises", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoverageBasisId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoverageTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoverageBasisId");

                    b.HasIndex("CoverageTypeId");

                    b.ToTable("CoverageLevels", "products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageLevelTypes", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoverageTypes", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAmount", b =>
                {
                    b.HasBaseType("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.ToTable("CoverageAmounts", "products");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageBasis", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageBasisId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageBasisId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageBasises_Code");

                            b1.ToTable("CoverageBasises", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageBasisId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageBasisId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageBasisId");

                            b1.ToTable("CoverageBasises", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageBasisId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", b =>
                {
                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageBasis", "CoverageBasis")
                        .WithMany()
                        .HasForeignKey("CoverageBasisId");

                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevelType", "CoverageType")
                        .WithMany()
                        .HasForeignKey("CoverageTypeId");

                    b.Navigation("CoverageBasis");

                    b.Navigation("CoverageType");
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevelType", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageLevelTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageLevelTypeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageLevelTypes_Code");

                            b1.ToTable("CoverageLevelTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageLevelTypeId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageLevelTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageLevelTypeId");

                            b1.ToTable("CoverageLevelTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageLevelTypeId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageType", b =>
                {
                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Code", "Code", b1 =>
                        {
                            b1.Property<Guid>("CoverageTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Code");

                            b1.HasKey("CoverageTypeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_CoverageTypes_Code");

                            b1.ToTable("CoverageTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageTypeId");
                        });

                    b.OwnsOne("InsuranceProducts.Tests.Domain.Products.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CoverageTypeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("CoverageTypeId");

                            b1.ToTable("CoverageTypes", "products");

                            b1.WithOwner()
                                .HasForeignKey("CoverageTypeId");
                        });

                    b.Navigation("Code")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAmount", b =>
                {
                    b.HasOne("InsuranceProducts.Tests.Domain.Products.Entities.CoverageLevel", null)
                        .WithOne()
                        .HasForeignKey("InsuranceProducts.Tests.Domain.Products.Entities.CoverageAmount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
